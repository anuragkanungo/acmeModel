import ROSFam.acme;
 
System Turtlebot : ROSFam = new ROSFam extended with {

    Component __amclnode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/scan";

            Property msg_type : string = "sensor_msgs/LaserScan";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport1 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/map";

            Property msg_type : string = "nav_msgs/OccupancyGrid";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport2 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/clock";

            Property msg_type : string = "rosgraph_msgs/Clock";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport3 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/tf";

            Property msg_type : string = "tf2_msgs/TFMessage";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport4 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/initialpose";

            Property msg_type : string = "geometry_msgs/PoseWithCovarianceStamped";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/amcl_pose";

            Property msg_type : string = "geometry_msgs/PoseWithCovarianceStamped";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport1 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/particlecloud";

            Property msg_type : string = "geometry_msgs/PoseArray";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport2 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport3 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/amcl/parameter_descriptions";

            Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport4 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/amcl/parameter_updates";

            Property msg_type : string = "dynamic_reconfigure/Config";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport5 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/tf";

            Property msg_type : string = "tf2_msgs/TFMessage";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/amcl";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __handler_17347_1469290430729node : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/clock";

            Property msg_type : string = "rosgraph_msgs/Clock";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/handler_17347_1469290430729";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __stagerosnode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/mobile_base/commands/velocity";

            Property msg_type : string = "geometry_msgs/Twist";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport1 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/clock";

            Property msg_type : string = "rosgraph_msgs/Clock";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/scan";

            Property msg_type : string = "sensor_msgs/LaserScan";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport1 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport2 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/clock";

            Property msg_type : string = "rosgraph_msgs/Clock";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport3 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/tf";

            Property msg_type : string = "tf2_msgs/TFMessage";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport4 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/odom";

            Property msg_type : string = "nav_msgs/Odometry";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport5 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/base_pose_ground_truth";

            Property msg_type : string = "nav_msgs/Odometry";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/stageros";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __rviznode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/move_base/global_costmap/costmap_updates";

            Property msg_type : string = "map_msgs/OccupancyGridUpdate";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport1 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/move_base/current_goal";

            Property msg_type : string = "geometry_msgs/PoseStamped";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport2 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/scan";

            Property msg_type : string = "sensor_msgs/LaserScan";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport3 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/particlecloud";

            Property msg_type : string = "geometry_msgs/PoseArray";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport4 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/move_base/global_costmap/costmap";

            Property msg_type : string = "nav_msgs/OccupancyGrid";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport5 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/map";

            Property msg_type : string = "nav_msgs/OccupancyGrid";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport6 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/move_base/DWAPlannerROS/global_plan";

            Property msg_type : string = "nav_msgs/Path";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport7 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/move_base/DWAPlannerROS/cost_cloud";

            Property msg_type : string = "sensor_msgs/PointCloud2";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport8 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/clock";

            Property msg_type : string = "rosgraph_msgs/Clock";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport9 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/move_base/NavfnROS/plan";

            Property msg_type : string = "nav_msgs/Path";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport10 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/tf";

            Property msg_type : string = "tf2_msgs/TFMessage";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport11 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/move_base/DWAPlannerROS/local_plan";

            Property msg_type : string = "nav_msgs/Path";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base_simple/goal";

            Property msg_type : string = "geometry_msgs/PoseStamped";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport1 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport2 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/initialpose";

            Property msg_type : string = "geometry_msgs/PoseWithCovarianceStamped";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/rviz";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __rosoutnode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout_agg";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/rosout";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __zeroconf__zeroconfnode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/zeroconf/new_connections";

            Property msg_type : string = "zeroconf_msgs/DiscoveredService";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport1 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport2 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/zeroconf/lost_connections";

            Property msg_type : string = "zeroconf_msgs/DiscoveredService";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }

        Property name : string = "/zeroconf/zeroconf";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __map_servernode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/clock";

            Property msg_type : string = "rosgraph_msgs/Clock";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/map_metadata";

            Property msg_type : string = "nav_msgs/MapMetaData";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport1 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/map";

            Property msg_type : string = "nav_msgs/OccupancyGrid";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport2 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/map_server";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __interactionsnode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/app_manager/status";

            Property msg_type : string = "rocon_app_manager_msgs/Status";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/interactions/pairing";

            Property msg_type : string = "rocon_interaction_msgs/Pair";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport1 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/interactions/interactive_clients";

            Property msg_type : string = "rocon_interaction_msgs/InteractiveClients";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport2 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/interactions";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __masternode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/info";

            Property msg_type : string = "rocon_std_msgs/MasterInfo";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport1 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/master";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __diagnostic_aggregatornode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/clock";

            Property msg_type : string = "rosgraph_msgs/Clock";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport1 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/diagnostics_toplevel_state";

            Property msg_type : string = "diagnostic_msgs/DiagnosticStatus";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport2 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/diagnostics_agg";

            Property msg_type : string = "diagnostic_msgs/DiagnosticArray";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/diagnostic_aggregator";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __joint_state_publishernode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/clock";

            Property msg_type : string = "rosgraph_msgs/Clock";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/joint_states";

            Property msg_type : string = "sensor_msgs/JointState";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport1 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/joint_state_publisher";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __move_basenode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/scan";

            Property msg_type : string = "sensor_msgs/LaserScan";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport1 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/move_base_simple/goal";

            Property msg_type : string = "geometry_msgs/PoseStamped";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport2 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/map";

            Property msg_type : string = "nav_msgs/OccupancyGrid";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport3 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/move_base/goal";

            Property msg_type : string = "move_base_msgs/MoveBaseActionGoal";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport4 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/clock";

            Property msg_type : string = "rosgraph_msgs/Clock";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport5 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/tf";

            Property msg_type : string = "tf2_msgs/TFMessage";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport6 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/odom";

            Property msg_type : string = "nav_msgs/Odometry";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/global_costmap/costmap_updates";

            Property msg_type : string = "map_msgs/OccupancyGridUpdate";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport1 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/current_goal";

            Property msg_type : string = "geometry_msgs/PoseStamped";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport2 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/local_costmap/inflation_layer/parameter_descriptions";

            Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport3 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/feedback";

            Property msg_type : string = "move_base_msgs/MoveBaseActionFeedback";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport4 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/global_costmap/parameter_updates";

            Property msg_type : string = "dynamic_reconfigure/Config";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport5 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/local_costmap/costmap";

            Property msg_type : string = "nav_msgs/OccupancyGrid";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport6 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/global_costmap/static_layer/parameter_updates";

            Property msg_type : string = "dynamic_reconfigure/Config";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport7 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/local_costmap/parameter_updates";

            Property msg_type : string = "dynamic_reconfigure/Config";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport8 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/global_costmap/obstacle_layer_footprint/footprint_stamped";

            Property msg_type : string = "geometry_msgs/PolygonStamped";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport9 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/navigation_velocity_smoother/raw_cmd_vel";

            Property msg_type : string = "geometry_msgs/Twist";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport10 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/local_costmap/inflation_layer/parameter_updates";

            Property msg_type : string = "dynamic_reconfigure/Config";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport11 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/local_costmap/obstacle_layer_footprint/parameter_updates";

            Property msg_type : string = "dynamic_reconfigure/Config";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport12 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/global_costmap/static_layer/parameter_descriptions";

            Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport13 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/local_costmap/costmap_updates";

            Property msg_type : string = "map_msgs/OccupancyGridUpdate";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport14 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/local_costmap/parameter_descriptions";

            Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport15 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/parameter_updates";

            Property msg_type : string = "dynamic_reconfigure/Config";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport16 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/status";

            Property msg_type : string = "actionlib_msgs/GoalStatusArray";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport17 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/global_costmap/inflation_layer/parameter_updates";

            Property msg_type : string = "dynamic_reconfigure/Config";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport18 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/DWAPlannerROS/parameter_descriptions";

            Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport19 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/global_costmap/costmap";

            Property msg_type : string = "nav_msgs/OccupancyGrid";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport20 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/DWAPlannerROS/global_plan";

            Property msg_type : string = "nav_msgs/Path";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport21 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/global_costmap/obstacle_layer_footprint/parameter_descriptions";

            Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport22 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/global_costmap/obstacle_layer/clearing_endpoints";

            Property msg_type : string = "sensor_msgs/PointCloud";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport23 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/local_costmap/obstacle_layer_footprint/parameter_descriptions";

            Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport24 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/DWAPlannerROS/cost_cloud";

            Property msg_type : string = "sensor_msgs/PointCloud2";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport25 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/local_costmap/obstacle_layer_footprint/footprint_stamped";

            Property msg_type : string = "geometry_msgs/PolygonStamped";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport26 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/global_costmap/inflation_layer/parameter_descriptions";

            Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport27 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport28 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/global_costmap/obstacle_layer_footprint/parameter_updates";

            Property msg_type : string = "dynamic_reconfigure/Config";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport29 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/local_costmap/obstacle_layer/parameter_descriptions";

            Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport30 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/goal";

            Property msg_type : string = "move_base_msgs/MoveBaseActionGoal";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport31 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/local_costmap/obstacle_layer/clearing_endpoints";

            Property msg_type : string = "sensor_msgs/PointCloud";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport32 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/global_costmap/obstacle_layer/parameter_descriptions";

            Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport33 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/global_costmap/parameter_descriptions";

            Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport34 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/DWAPlannerROS/trajectory_cloud";

            Property msg_type : string = "sensor_msgs/PointCloud2";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport35 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/parameter_descriptions";

            Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport36 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/NavfnROS/plan";

            Property msg_type : string = "nav_msgs/Path";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport37 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/DWAPlannerROS/parameter_updates";

            Property msg_type : string = "dynamic_reconfigure/Config";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport38 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/local_costmap/obstacle_layer/parameter_updates";

            Property msg_type : string = "dynamic_reconfigure/Config";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport39 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/result";

            Property msg_type : string = "move_base_msgs/MoveBaseActionResult";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport40 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/global_costmap/obstacle_layer/parameter_updates";

            Property msg_type : string = "dynamic_reconfigure/Config";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport41 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/move_base/DWAPlannerROS/local_plan";

            Property msg_type : string = "nav_msgs/Path";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/move_base";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __robot_state_publishernode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/joint_states";

            Property msg_type : string = "sensor_msgs/JointState";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport1 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/clock";

            Property msg_type : string = "rosgraph_msgs/Clock";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport1 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/tf";

            Property msg_type : string = "tf2_msgs/TFMessage";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/robot_state_publisher";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __capability_servernode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {

            Property topic : string = "/capability_server/events";

            Property msg_type : string = "capabilities/CapabilityEvent";
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport1 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/capability_server/events";

            Property msg_type : string = "capabilities/CapabilityEvent";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/capability_server";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __app_managernode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port pport0 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/gateway/force_update";

            Property msg_type : string = "std_msgs/Empty";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport1 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/app_manager/status";

            Property msg_type : string = "rocon_app_manager_msgs/Status";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport2 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/app_manager/incompatible_rapp_list";

            Property msg_type : string = "rocon_app_manager_msgs/IncompatibleRappList";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport3 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/rosout";

            Property msg_type : string = "rosgraph_msgs/Log";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port pport4 : TopicAdvertisePortT = new TopicAdvertisePortT extended with {

            Property topic : string = "/app_manager/rapp_list";

            Property msg_type : string = "rocon_app_manager_msgs/RappList";
            rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, AnnouncerRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, PublisherRoleT);

        }
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/app_manager";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __mobile_base_nodelet_managernode : ROSNodeManagerCompT = new ROSNodeManagerCompT extended with {
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/mobile_base_nodelet_manager";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __cmd_vel_muxnode  = {
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/cmd_vel_mux";

    }
    Component __kobuki_safety_controllernode  = {
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/kobuki_safety_controller";

    }
    Component __navigation_velocity_smoothernode  = {
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/navigation_velocity_smoother";

    }
    Component __capability_server_nodelet_managernode : ROSNodeManagerCompT = new ROSNodeManagerCompT extended with {
        Port serport0 : ServiceProviderPortT = new ServiceProviderPortT extended with {
            rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
            rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, ResponderRoleT);

        }

        Property name : string = "/capability_server_nodelet_manager";
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Connector __move_base__local_costmap__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/local_costmap/parameter_descriptions";

        Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __zeroconf__new_connectionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/zeroconf/new_connections";

        Property msg_type : string = "zeroconf_msgs/DiscoveredService";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__inflation_layer__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/global_costmap/inflation_layer/parameter_descriptions";

        Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __infotopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/info";

        Property msg_type : string = "rocon_std_msgs/MasterInfo";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __rosout_aggtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/rosout_agg";

        Property msg_type : string = "rosgraph_msgs/Log";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__costmaptopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/local_costmap/costmap";

        Property msg_type : string = "nav_msgs/OccupancyGrid";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __navigation_velocity_smoother__raw_cmd_veltopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/navigation_velocity_smoother/raw_cmd_vel";

        Property msg_type : string = "geometry_msgs/Twist";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __gateway__force_updatetopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/gateway/force_update";

        Property msg_type : string = "std_msgs/Empty";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __interactions__pairingtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/interactions/pairing";

        Property msg_type : string = "rocon_interaction_msgs/Pair";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __navigation_velocity_smoother__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {

        Property topic : string = "/navigation_velocity_smoother/parameter_updates";

        Property msg_type : string = "dynamic_reconfigure/Config";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__obstacle_layer__clearing_endpointstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/global_costmap/obstacle_layer/clearing_endpoints";

        Property msg_type : string = "sensor_msgs/PointCloud";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__obstacle_layer__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/local_costmap/obstacle_layer/parameter_descriptions";

        Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__obstacle_layer_footprint__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/global_costmap/obstacle_layer_footprint/parameter_descriptions";

        Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__DWAPlannerROS__local_plantopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT3 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/DWAPlannerROS/local_plan";

        Property msg_type : string = "nav_msgs/Path";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base_simple__goaltopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT2 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }

        Property topic : string = "/move_base_simple/goal";

        Property msg_type : string = "geometry_msgs/PoseStamped";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __maptopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicSubscriberRoleT1 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT2 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }

        Property topic : string = "/map";

        Property msg_type : string = "nav_msgs/OccupancyGrid";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __clocktopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicSubscriberRoleT1 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicSubscriberRoleT2 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT2 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT3 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicSubscriberRoleT4 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicSubscriberRoleT5 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicSubscriberRoleT6 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicSubscriberRoleT7 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicSubscriberRoleT8 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }

        Property topic : string = "/clock";

        Property msg_type : string = "rosgraph_msgs/Clock";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__static_layer__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/global_costmap/static_layer/parameter_descriptions";

        Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__obstacle_layer_footprint__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/local_costmap/obstacle_layer_footprint/parameter_descriptions";

        Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __amcl_posetopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/amcl_pose";

        Property msg_type : string = "geometry_msgs/PoseWithCovarianceStamped";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__current_goaltopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/current_goal";

        Property msg_type : string = "geometry_msgs/PoseStamped";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__inflation_layer__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/local_costmap/inflation_layer/parameter_descriptions";

        Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__obstacle_layer_footprint__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/local_costmap/obstacle_layer_footprint/parameter_updates";

        Property msg_type : string = "dynamic_reconfigure/Config";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __interactions__interactive_clientstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/interactions/interactive_clients";

        Property msg_type : string = "rocon_interaction_msgs/InteractiveClients";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__DWAPlannerROS__global_plantopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT1 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/DWAPlannerROS/global_plan";

        Property msg_type : string = "nav_msgs/Path";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __mobile_base__commands__velocitytopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }

        Property topic : string = "/mobile_base/commands/velocity";

        Property msg_type : string = "geometry_msgs/Twist";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __app_manager__incompatible_rapp_listtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/app_manager/incompatible_rapp_list";

        Property msg_type : string = "rocon_app_manager_msgs/IncompatibleRappList";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __diagnostics_aggtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT8 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/diagnostics_agg";

        Property msg_type : string = "diagnostic_msgs/DiagnosticArray";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__costmaptopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT1 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/global_costmap/costmap";

        Property msg_type : string = "nav_msgs/OccupancyGrid";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __mobile_base_nodelet_manager__bondtopic : TopicConnectorT = new TopicConnectorT extended with {

        Property topic : string = "/mobile_base_nodelet_manager/bond";

        Property msg_type : string = "bond/Status";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__resulttopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/result";

        Property msg_type : string = "move_base_msgs/MoveBaseActionResult";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __amcl__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/amcl/parameter_descriptions";

        Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __rosouttopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT1 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT2 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT3 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT0 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT4 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT5 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT6 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT7 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT8 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT11 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT12 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT13 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/rosout";

        Property msg_type : string = "rosgraph_msgs/Log";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __diagnostics_toplevel_statetopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT8 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/diagnostics_toplevel_state";

        Property msg_type : string = "diagnostic_msgs/DiagnosticStatus";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __joint_statestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT0 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }

        Property topic : string = "/joint_states";

        Property msg_type : string = "sensor_msgs/JointState";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __cmd_vel_mux__input__safety_controllertopic : TopicConnectorT = new TopicConnectorT extended with {

        Property topic : string = "/cmd_vel_mux/input/safety_controller";

        Property msg_type : string = "geometry_msgs/Twist";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __zeroconf__lost_connectionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT4 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/zeroconf/lost_connections";

        Property msg_type : string = "zeroconf_msgs/DiscoveredService";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__NavfnROS__plantopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT3 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/NavfnROS/plan";

        Property msg_type : string = "nav_msgs/Path";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__inflation_layer__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/local_costmap/inflation_layer/parameter_updates";

        Property msg_type : string = "dynamic_reconfigure/Config";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/global_costmap/parameter_updates";

        Property msg_type : string = "dynamic_reconfigure/Config";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __capability_server__eventstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT12 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/capability_server/events";

        Property msg_type : string = "capabilities/CapabilityEvent";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __particlecloudtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT1 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }

        Property topic : string = "/particlecloud";

        Property msg_type : string = "geometry_msgs/PoseArray";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __scantopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT1 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicSubscriberRoleT2 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }

        Property topic : string = "/scan";

        Property msg_type : string = "sensor_msgs/LaserScan";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/global_costmap/parameter_descriptions";

        Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__obstacle_layer__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/global_costmap/obstacle_layer/parameter_updates";

        Property msg_type : string = "dynamic_reconfigure/Config";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__DWAPlannerROS__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/DWAPlannerROS/parameter_updates";

        Property msg_type : string = "dynamic_reconfigure/Config";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __base_pose_ground_truthtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT2 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/base_pose_ground_truth";

        Property msg_type : string = "nav_msgs/Odometry";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/local_costmap/parameter_updates";

        Property msg_type : string = "dynamic_reconfigure/Config";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__costmap_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/local_costmap/costmap_updates";

        Property msg_type : string = "map_msgs/OccupancyGridUpdate";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__statustopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/status";

        Property msg_type : string = "actionlib_msgs/GoalStatusArray";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __odomtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT2 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT7 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }

        Property topic : string = "/odom";

        Property msg_type : string = "nav_msgs/Odometry";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __amcl__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/amcl/parameter_updates";

        Property msg_type : string = "dynamic_reconfigure/Config";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __cmd_vel_mux__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {

        Property topic : string = "/cmd_vel_mux/parameter_descriptions";

        Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __app_manager__rapp_listtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT13 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/app_manager/rapp_list";

        Property msg_type : string = "rocon_app_manager_msgs/RappList";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__DWAPlannerROS__trajectory_cloudtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/DWAPlannerROS/trajectory_cloud";

        Property msg_type : string = "sensor_msgs/PointCloud2";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__DWAPlannerROS__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/DWAPlannerROS/parameter_descriptions";

        Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __cmd_vel_mux__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {

        Property topic : string = "/cmd_vel_mux/parameter_updates";

        Property msg_type : string = "dynamic_reconfigure/Config";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__obstacle_layer_footprint__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/global_costmap/obstacle_layer_footprint/parameter_updates";

        Property msg_type : string = "dynamic_reconfigure/Config";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __initialposetopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT3 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/initialpose";

        Property msg_type : string = "geometry_msgs/PoseWithCovarianceStamped";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__obstacle_layer_footprint__footprint_stampedtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/local_costmap/obstacle_layer_footprint/footprint_stamped";

        Property msg_type : string = "geometry_msgs/PolygonStamped";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __cmd_vel_mux__input__navitopic : TopicConnectorT = new TopicConnectorT extended with {

        Property topic : string = "/cmd_vel_mux/input/navi";

        Property msg_type : string = "geometry_msgs/Twist";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__feedbacktopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/feedback";

        Property msg_type : string = "move_base_msgs/MoveBaseActionFeedback";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__obstacle_layer_footprint__footprint_stampedtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/global_costmap/obstacle_layer_footprint/footprint_stamped";

        Property msg_type : string = "geometry_msgs/PolygonStamped";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__DWAPlannerROS__cost_cloudtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT1 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/DWAPlannerROS/cost_cloud";

        Property msg_type : string = "sensor_msgs/PointCloud2";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __navigation_velocity_smoother__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {

        Property topic : string = "/navigation_velocity_smoother/parameter_descriptions";

        Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__inflation_layer__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/global_costmap/inflation_layer/parameter_updates";

        Property msg_type : string = "dynamic_reconfigure/Config";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/parameter_descriptions";

        Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __cmd_vel_mux__activetopic : TopicConnectorT = new TopicConnectorT extended with {

        Property topic : string = "/cmd_vel_mux/active";

        Property msg_type : string = "std_msgs/String";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/parameter_updates";

        Property msg_type : string = "dynamic_reconfigure/Config";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__costmap_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/global_costmap/costmap_updates";

        Property msg_type : string = "map_msgs/OccupancyGridUpdate";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__obstacle_layer__clearing_endpointstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/local_costmap/obstacle_layer/clearing_endpoints";

        Property msg_type : string = "sensor_msgs/PointCloud";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__goaltopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT2 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/goal";

        Property msg_type : string = "move_base_msgs/MoveBaseActionGoal";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__static_layer__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/global_costmap/static_layer/parameter_updates";

        Property msg_type : string = "dynamic_reconfigure/Config";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__obstacle_layer__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/global_costmap/obstacle_layer/parameter_descriptions";

        Property msg_type : string = "dynamic_reconfigure/ConfigDescription";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__obstacle_layer__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT10 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/move_base/local_costmap/obstacle_layer/parameter_updates";

        Property msg_type : string = "dynamic_reconfigure/Config";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __app_manager__statustopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/app_manager/status";

        Property msg_type : string = "rocon_app_manager_msgs/Status";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __map_metadatatopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/map_metadata";

        Property msg_type : string = "nav_msgs/MapMetaData";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __tftopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT2 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT3 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicSubscriberRoleT7 : ROSTopicSubscriberRoleT = new ROSTopicSubscriberRoleT extended with {
            rule attachedOnlyToReceivePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, ReceivePortT);
            rule attachedToSubscribePortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, SubscribePortT);

        }
        Role ROSTopicAdvertiserRoleT11 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }

        Property topic : string = "/tf";

        Property msg_type : string = "tf2_msgs/TFMessage";
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == topic AND p.msg_type == msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __amcl__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __amcl__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __amcl__set_parameters : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __handler_17347_1469290430729__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __handler_17347_1469290430729__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __stageros__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __stageros__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __rviz__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __rviz__reload_shaders : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __rviz__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __rosout__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __rosout__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __map_server__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __map_server__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __interactions__request_interaction_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __interactions__get_interactions_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __interactions__set_interactions_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __interactions__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __interactions__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __interactions__get_interaction_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __interactions__get_roles_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __master__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __master__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __diagnostic_aggregator__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __diagnostic_aggregator__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __joint_state_publisher__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __joint_state_publisher__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__clear_costmaps : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__local_costmap__obstacle_layer_footprint__set_parameters : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__NavfnROS__make_plan : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__global_costmap__set_parameters : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__global_costmap__obstacle_layer__set_parameters : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__local_costmap__obstacle_layer__set_parameters : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__local_costmap__set_parameters : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__global_costmap__inflation_layer__set_parameters : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__global_costmap__static_layer__set_parameters : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__set_parameters : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__DWAPlannerROS__set_parameters : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__local_costmap__inflation_layer__set_parameters : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__make_plan : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __move_base__global_costmap__obstacle_layer_footprint__set_parameters : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __robot_state_publisher__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __robot_state_publisher__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__reload_capabilities_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__get_providers_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__get_semantic_interfaces_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__get_capability_specs_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__get_nodelet_manager_name_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__use_capability_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__stop_capability_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__establish_bond_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__free_capability_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__get_running_capabilities_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__get_remappings_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__get_capability_spec_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__get_interfaces_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server__start_capability_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __app_manager__platform_info_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __app_manager__invite_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __app_manager__start_rapp_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __app_manager__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __app_manager__list_rapps_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __app_manager__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __app_manager__stop_rapp_prime : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __mobile_base_nodelet_manager__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __mobile_base_nodelet_manager__list : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __mobile_base_nodelet_manager__load_nodelet : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __mobile_base_nodelet_manager__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __mobile_base_nodelet_manager__unload_nodelet : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __cmd_vel_mux__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __cmd_vel_mux__set_parameters : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __cmd_vel_mux__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __kobuki_safety_controller__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __kobuki_safety_controller__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __navigation_velocity_smoother__set_parameters : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __navigation_velocity_smoother__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __navigation_velocity_smoother__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server_nodelet_manager__set_logger_level : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server_nodelet_manager__unload_nodelet : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server_nodelet_manager__get_loggers : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server_nodelet_manager__load_nodelet : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Connector __capability_server_nodelet_manager__list : ServiceConnT = new ServiceConnT extended with {
        rule exactly2Roles = invariant size(self.ROLES) == 2;
        rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | 
            declaresType(r, CallerRoleT);
        rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | 
            declaresType(r, ResponderRoleT);

    }
    Attachment __amclnode.sport0 to __scantopic.ROSTopicSubscriberRoleT0;
    Attachment __amclnode.sport1 to __maptopic.ROSTopicSubscriberRoleT0;
    Attachment __amclnode.sport2 to __clocktopic.ROSTopicSubscriberRoleT0;
    Attachment __amclnode.sport3 to __tftopic.ROSTopicSubscriberRoleT0;
    Attachment __amclnode.sport4 to __initialposetopic.ROSTopicSubscriberRoleT0;
    Attachment __amclnode.pport0 to __amcl_posetopic.ROSTopicAdvertiserRoleT0;
    Attachment __amclnode.pport1 to __particlecloudtopic.ROSTopicAdvertiserRoleT0;
    Attachment __amclnode.pport2 to __rosouttopic.ROSTopicAdvertiserRoleT0;
    Attachment __amclnode.pport3 to __amcl__parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment __amclnode.pport4 to __amcl__parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment __amclnode.pport5 to __tftopic.ROSTopicAdvertiserRoleT0;
    Attachment __handler_17347_1469290430729node.sport0 to __clocktopic.ROSTopicSubscriberRoleT1;
    Attachment __handler_17347_1469290430729node.pport0 to __rosouttopic.ROSTopicAdvertiserRoleT1;
    Attachment __stagerosnode.sport0 to __mobile_base__commands__velocitytopic.ROSTopicSubscriberRoleT0;
    Attachment __stagerosnode.sport1 to __clocktopic.ROSTopicSubscriberRoleT2;
    Attachment __stagerosnode.pport0 to __scantopic.ROSTopicAdvertiserRoleT0;
    Attachment __stagerosnode.pport1 to __rosouttopic.ROSTopicAdvertiserRoleT2;
    Attachment __stagerosnode.pport2 to __clocktopic.ROSTopicAdvertiserRoleT2;
    Attachment __stagerosnode.pport3 to __tftopic.ROSTopicAdvertiserRoleT2;
    Attachment __stagerosnode.pport4 to __odomtopic.ROSTopicAdvertiserRoleT2;
    Attachment __stagerosnode.pport5 to __base_pose_ground_truthtopic.ROSTopicAdvertiserRoleT2;
    Attachment __rviznode.sport0 to __move_base__global_costmap__costmap_updatestopic.ROSTopicSubscriberRoleT0;
    Attachment __rviznode.sport1 to __move_base__current_goaltopic.ROSTopicSubscriberRoleT0;
    Attachment __rviznode.sport2 to __scantopic.ROSTopicSubscriberRoleT1;
    Attachment __rviznode.sport3 to __particlecloudtopic.ROSTopicSubscriberRoleT1;
    Attachment __rviznode.sport4 to __move_base__global_costmap__costmaptopic.ROSTopicSubscriberRoleT1;
    Attachment __rviznode.sport5 to __maptopic.ROSTopicSubscriberRoleT1;
    Attachment __rviznode.sport6 to __move_base__DWAPlannerROS__global_plantopic.ROSTopicSubscriberRoleT1;
    Attachment __rviznode.sport7 to __move_base__DWAPlannerROS__cost_cloudtopic.ROSTopicSubscriberRoleT1;
    Attachment __rviznode.sport8 to __clocktopic.ROSTopicSubscriberRoleT3;
    Attachment __rviznode.sport9 to __move_base__NavfnROS__plantopic.ROSTopicSubscriberRoleT3;
    Attachment __rviznode.sport10 to __tftopic.ROSTopicSubscriberRoleT3;
    Attachment __rviznode.sport11 to __move_base__DWAPlannerROS__local_plantopic.ROSTopicSubscriberRoleT3;
    Attachment __rviznode.pport0 to __move_base_simple__goaltopic.ROSTopicAdvertiserRoleT0;
    Attachment __rviznode.pport1 to __rosouttopic.ROSTopicAdvertiserRoleT3;
    Attachment __rviznode.pport2 to __initialposetopic.ROSTopicAdvertiserRoleT3;
    Attachment __rosoutnode.sport0 to __rosouttopic.ROSTopicSubscriberRoleT0;
    Attachment __rosoutnode.pport0 to __rosout_aggtopic.ROSTopicAdvertiserRoleT0;
    Attachment __zeroconf__zeroconfnode.pport0 to __zeroconf__new_connectionstopic.ROSTopicAdvertiserRoleT0;
    Attachment __zeroconf__zeroconfnode.pport1 to __rosouttopic.ROSTopicAdvertiserRoleT4;
    Attachment __zeroconf__zeroconfnode.pport2 to __zeroconf__lost_connectionstopic.ROSTopicAdvertiserRoleT4;
    Attachment __map_servernode.sport0 to __clocktopic.ROSTopicSubscriberRoleT4;
    Attachment __map_servernode.pport0 to __map_metadatatopic.ROSTopicAdvertiserRoleT0;
    Attachment __map_servernode.pport1 to __maptopic.ROSTopicAdvertiserRoleT0;
    Attachment __map_servernode.pport2 to __rosouttopic.ROSTopicAdvertiserRoleT5;
    Attachment __interactionsnode.sport0 to __app_manager__statustopic.ROSTopicSubscriberRoleT0;
    Attachment __interactionsnode.pport0 to __interactions__pairingtopic.ROSTopicAdvertiserRoleT0;
    Attachment __interactionsnode.pport1 to __interactions__interactive_clientstopic.ROSTopicAdvertiserRoleT0;
    Attachment __interactionsnode.pport2 to __rosouttopic.ROSTopicAdvertiserRoleT6;
    Attachment __masternode.pport0 to __infotopic.ROSTopicAdvertiserRoleT0;
    Attachment __masternode.pport1 to __rosouttopic.ROSTopicAdvertiserRoleT7;
    Attachment __diagnostic_aggregatornode.sport0 to __clocktopic.ROSTopicSubscriberRoleT5;
    Attachment __diagnostic_aggregatornode.pport0 to __rosouttopic.ROSTopicAdvertiserRoleT8;
    Attachment __diagnostic_aggregatornode.pport1 to __diagnostics_toplevel_statetopic.ROSTopicAdvertiserRoleT8;
    Attachment __diagnostic_aggregatornode.pport2 to __diagnostics_aggtopic.ROSTopicAdvertiserRoleT8;
    Attachment __joint_state_publishernode.sport0 to __clocktopic.ROSTopicSubscriberRoleT6;
    Attachment __joint_state_publishernode.pport0 to __joint_statestopic.ROSTopicAdvertiserRoleT0;
    Attachment __joint_state_publishernode.pport1 to __rosouttopic.ROSTopicAdvertiserRoleT9;
    Attachment __move_basenode.sport0 to __scantopic.ROSTopicSubscriberRoleT2;
    Attachment __move_basenode.sport1 to __move_base_simple__goaltopic.ROSTopicSubscriberRoleT2;
    Attachment __move_basenode.sport2 to __maptopic.ROSTopicSubscriberRoleT2;
    Attachment __move_basenode.sport3 to __move_base__goaltopic.ROSTopicSubscriberRoleT2;
    Attachment __move_basenode.sport4 to __clocktopic.ROSTopicSubscriberRoleT7;
    Attachment __move_basenode.sport5 to __tftopic.ROSTopicSubscriberRoleT7;
    Attachment __move_basenode.sport6 to __odomtopic.ROSTopicSubscriberRoleT7;
    Attachment __move_basenode.pport0 to __move_base__global_costmap__costmap_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport1 to __move_base__current_goaltopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport2 to __move_base__local_costmap__inflation_layer__parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport3 to __move_base__feedbacktopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport4 to __move_base__global_costmap__parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport5 to __move_base__local_costmap__costmaptopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport6 to __move_base__global_costmap__static_layer__parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport7 to __move_base__local_costmap__parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport8 to __move_base__global_costmap__obstacle_layer_footprint__footprint_stampedtopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport9 to __navigation_velocity_smoother__raw_cmd_veltopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport10 to __move_base__local_costmap__inflation_layer__parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport11 to __move_base__local_costmap__obstacle_layer_footprint__parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport12 to __move_base__global_costmap__static_layer__parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport13 to __move_base__local_costmap__costmap_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport14 to __move_base__local_costmap__parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport15 to __move_base__parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport16 to __move_base__statustopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport17 to __move_base__global_costmap__inflation_layer__parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport18 to __move_base__DWAPlannerROS__parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport19 to __move_base__global_costmap__costmaptopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport20 to __move_base__DWAPlannerROS__global_plantopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport21 to __move_base__global_costmap__obstacle_layer_footprint__parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport22 to __move_base__global_costmap__obstacle_layer__clearing_endpointstopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport23 to __move_base__local_costmap__obstacle_layer_footprint__parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport24 to __move_base__DWAPlannerROS__cost_cloudtopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport25 to __move_base__local_costmap__obstacle_layer_footprint__footprint_stampedtopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport26 to __move_base__global_costmap__inflation_layer__parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment __move_basenode.pport27 to __rosouttopic.ROSTopicAdvertiserRoleT10;
    Attachment __move_basenode.pport28 to __move_base__global_costmap__obstacle_layer_footprint__parameter_updatestopic.ROSTopicAdvertiserRoleT10;
    Attachment __move_basenode.pport29 to __move_base__local_costmap__obstacle_layer__parameter_descriptionstopic.ROSTopicAdvertiserRoleT10;
    Attachment __move_basenode.pport30 to __move_base__goaltopic.ROSTopicAdvertiserRoleT10;
    Attachment __move_basenode.pport31 to __move_base__local_costmap__obstacle_layer__clearing_endpointstopic.ROSTopicAdvertiserRoleT10;
    Attachment __move_basenode.pport32 to __move_base__global_costmap__obstacle_layer__parameter_descriptionstopic.ROSTopicAdvertiserRoleT10;
    Attachment __move_basenode.pport33 to __move_base__global_costmap__parameter_descriptionstopic.ROSTopicAdvertiserRoleT10;
    Attachment __move_basenode.pport34 to __move_base__DWAPlannerROS__trajectory_cloudtopic.ROSTopicAdvertiserRoleT10;
    Attachment __move_basenode.pport35 to __move_base__parameter_descriptionstopic.ROSTopicAdvertiserRoleT10;
    Attachment __move_basenode.pport36 to __move_base__NavfnROS__plantopic.ROSTopicAdvertiserRoleT10;
    Attachment __move_basenode.pport37 to __move_base__DWAPlannerROS__parameter_updatestopic.ROSTopicAdvertiserRoleT10;
    Attachment __move_basenode.pport38 to __move_base__local_costmap__obstacle_layer__parameter_updatestopic.ROSTopicAdvertiserRoleT10;
    Attachment __move_basenode.pport39 to __move_base__resulttopic.ROSTopicAdvertiserRoleT10;
    Attachment __move_basenode.pport40 to __move_base__global_costmap__obstacle_layer__parameter_updatestopic.ROSTopicAdvertiserRoleT10;
    Attachment __move_basenode.pport41 to __move_base__DWAPlannerROS__local_plantopic.ROSTopicAdvertiserRoleT10;
    Attachment __robot_state_publishernode.sport0 to __joint_statestopic.ROSTopicSubscriberRoleT0;
    Attachment __robot_state_publishernode.sport1 to __clocktopic.ROSTopicSubscriberRoleT8;
    Attachment __robot_state_publishernode.pport0 to __rosouttopic.ROSTopicAdvertiserRoleT11;
    Attachment __robot_state_publishernode.pport1 to __tftopic.ROSTopicAdvertiserRoleT11;
    Attachment __capability_servernode.sport0 to __capability_server__eventstopic.ROSTopicSubscriberRoleT0;
    Attachment __capability_servernode.pport0 to __rosouttopic.ROSTopicAdvertiserRoleT12;
    Attachment __capability_servernode.pport1 to __capability_server__eventstopic.ROSTopicAdvertiserRoleT12;
    Attachment __app_managernode.pport0 to __gateway__force_updatetopic.ROSTopicAdvertiserRoleT0;
    Attachment __app_managernode.pport1 to __app_manager__statustopic.ROSTopicAdvertiserRoleT0;
    Attachment __app_managernode.pport2 to __app_manager__incompatible_rapp_listtopic.ROSTopicAdvertiserRoleT0;
    Attachment __app_managernode.pport3 to __rosouttopic.ROSTopicAdvertiserRoleT13;
    Attachment __app_managernode.pport4 to __app_manager__rapp_listtopic.ROSTopicAdvertiserRoleT13;
    Group group1 : ROSNodeManagerGroupT = new ROSNodeManagerGroupT extended with {
        rule onlyNodelets = invariant forall m in self.MEMBERS | 
            (declaresType(m, ROSNodeletCompT) OR declaresType(m, ROSNodeManagerCompT));
        rule oneNodeManager = invariant exists unique m in self.MEMBERS | 
            declaresType(m, ROSNodeManagerCompT);
        Members {__mobile_base_nodelet_managernode, __cmd_vel_muxnode, __kobuki_safety_controllernode, __navigation_velocity_smoothernode}

    }
    Group group2 : ROSNodeManagerGroupT = new ROSNodeManagerGroupT extended with {
        rule onlyNodelets = invariant forall m in self.MEMBERS | 
            (declaresType(m, ROSNodeletCompT) OR declaresType(m, ROSNodeManagerCompT));
        rule oneNodeManager = invariant exists unique m in self.MEMBERS | 
            declaresType(m, ROSNodeManagerCompT);
        Members {__capability_server_nodelet_managernode}

    }
    rule allNodeletsInGroup = invariant forall n :! ROSNodeletCompT in self.COMPONENTS | 
        exists unique m :! ROSNodeManagerGroupT in self.GROUPS | 
            contains(n, m.MEMBERS);
    rule topicsMatch = invariant forall s :! TopicSubscribePortT in /self/COMPONENTS/PORTS:!TopicSubscribePortT | 
        exists p :! TopicAdvertisePortT in /self/COMPONENTS/PORTS:!TopicAdvertisePortT | 
            (s.topic == p.topic AND s.msg_type == p.msg_type);
    rule onlyOneBusForTopicAndMsg = invariant forall t1,t2 :! TopicConnectorT in self.CONNECTORS | 
        ((t1.msg_type == t2.msg_type AND t1.topic == t2.topic) <-> t1 == t2);
    rule onlyOneBusForTopic = heuristic forall t1,t2 :! TopicConnectorT in self.CONNECTORS | 
        (t1.topic == t2.topic) <-> t1 == t2;
    rule noDuplicateNodes = invariant forall n2 :! ROSNodeCompT in self.COMPONENTS | 
        forall n1 :! ROSNodeCompT in self.COMPONENTS | 
            (n1.name == n2.name) <-> n1 == n2;
}

