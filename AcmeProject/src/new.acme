import ROSFam.acme;
 
System Turtlebot : ROSFam = new ROSFam extended with {

    Component __amclnode : ROSNodeCompT = new ROSNodeCompT extended with {
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __robot_state_publishernode : ROSNodeCompT = new ROSNodeCompT extended with {
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __rosoutnode : ROSNodeCompT = new ROSNodeCompT extended with {
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __map_servernode : ROSNodeCompT = new ROSNodeCompT extended with {
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __joint_state_publishernode : ROSNodeCompT = new ROSNodeCompT extended with {
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __diagnostic_aggregatornode : ROSNodeCompT = new ROSNodeCompT extended with {
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __mobile_base_nodelet_managernode : ROSNodeCompT = new ROSNodeCompT extended with {
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component __move_basenode : ROSNodeCompT = new ROSNodeCompT extended with {
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Connector __map_metadatatopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector map_msgs__OccupancyGridUpdatetopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __cmd_vel_mux__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__feedbacktopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __navigation_velocity_smoother__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__obstacle_layer_footprint__footprint_stampedtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector diagnostic_msgs__DiagnosticStatustopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__obstacle_layer_footprint__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__NavfnROS__plantopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__statustopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector move_base_msgs__MoveBaseActionFeedbacktopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector geometry_msgs__PoseStampedtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__obstacle_layer__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__obstacle_layer__clearing_endpointstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__inflation_layer__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector rosgraph_msgs__Logtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __mobile_base_nodelet_manager__bondtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector dynamic_reconfigure__Configtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__current_goaltopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__costmaptopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __navigation_velocity_smoother__raw_cmd_veltopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__inflation_layer__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector sensor_msgs__PointCloud2topic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__obstacle_layer_footprint__footprint_stampedtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __particlecloudtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__DWAPlannerROS__global_plantopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__obstacle_layer__clearing_endpointstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector std_msgs__Stringtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__DWAPlannerROS__cost_cloudtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__goaltopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector bond__Statustopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __mobile_base__commands__velocitytopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __diagnostics_toplevel_statetopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__obstacle_layer_footprint__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__obstacle_layer__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector move_base_msgs__MoveBaseActionGoaltopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__costmap_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__inflation_layer__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector geometry_msgs__Twisttopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __tftopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__DWAPlannerROS__trajectory_cloudtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __cmd_vel_mux__input__safety_controllertopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__static_layer__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector actionlib_msgs__GoalStatusArraytopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector sensor_msgs__JointStatetopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector geometry_msgs__PoseWithCovarianceStampedtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__costmap_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__inflation_layer__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__DWAPlannerROS__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __cmd_vel_mux__input__navitopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector nav_msgs__OccupancyGridtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __joint_statestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __rosouttopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__obstacle_layer__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector tf2_msgs__TFMessagetopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__obstacle_layer_footprint__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__costmaptopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__DWAPlannerROS__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector geometry_msgs__PoseArraytopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __amcl_posetopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __rosout_aggtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector geometry_msgs__PolygonStampedtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __cmd_vel_mux__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__static_layer__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __maptopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __cmd_vel_mux__activetopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __navigation_velocity_smoother__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__obstacle_layer_footprint__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector move_base_msgs__MoveBaseActionResulttopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector dynamic_reconfigure__ConfigDescriptiontopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector diagnostic_msgs__DiagnosticArraytopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__local_costmap__obstacle_layer__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __amcl__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __amcl__parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__DWAPlannerROS__local_plantopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector nav_msgs__Pathtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__resulttopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector nav_msgs__MapMetaDatatopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __move_base__global_costmap__parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector __diagnostics_aggtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector sensor_msgs__PointCloudtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    rule topicsMatch = heuristic forall s :! TopicSubscribePortT in /self/COMPONENTS/PORTS:!TopicSubscribePortT | 
        exists p :! TopicAdvertisePortT in /self/COMPONENTS/PORTS:!TopicAdvertisePortT | 
            (s.topic == p.topic AND s.msg_type == p.msg_type);
    rule onlyOneBusForTopicAndMsg = invariant forall t1 :! TopicConnectorT in self.CONNECTORS | 
        forall t2 :! TopicConnectorT in self.CONNECTORS | 
            ((t1.msg_type == t2.msg_type AND t1.topic == t2.topic) <-> t1 == t2);
    rule onlyOneBusForTopic = heuristic forall t1 :! TopicConnectorT in self.CONNECTORS | 
        forall t2 :! TopicConnectorT in self.CONNECTORS | 
            (t1.topic == t2.topic) <-> t1 == t2;
    rule noDuplicateNodes = invariant forall n2 :! ROSNodeCompT in self.COMPONENTS | 
        forall n1 :! ROSNodeCompT in self.COMPONENTS | 
            (n1.name == n2.name) <-> n1 == n2;
}

