org.acmestudio.basicmodel.model.AcmeModelimport ROSFam.acme;
 
System Turtlebot : ROSFam = new ROSFam extended with {

    Component /amclnode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport1 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport1 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport2 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport3 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport4 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport5 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component /cmd_vel_muxnode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport1 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component /robot_state_publishernode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport1 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component /navigation_velocity_smoothernode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport1 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component /rosoutnode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component /map_servernode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port pport0 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport1 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport2 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component /joint_state_publishernode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port pport0 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport1 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component /kobuki_safety_controllernode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport1 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component /diagnostic_aggregatornode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port pport0 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport1 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport2 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component /mobile_base_nodelet_managernode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport1 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport2 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport3 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport4 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport1 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport2 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport3 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport4 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport5 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport6 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport7 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport8 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport9 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Component /move_basenode : ROSNodeCompT = new ROSNodeCompT extended with {
        Port sport0 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport1 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port sport2 : TopicSubscribePortT = new TopicSubscribePortT extended with {
            rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | 
                declaresType(a, ReceiverRoleT);
            rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
            rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | 
                declaresType(r, SubscriberRoleT);

        }
        Port pport0 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport1 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport2 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport3 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport4 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport5 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport6 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport7 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport8 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport9 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport10 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport11 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport12 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport13 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport14 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport15 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport16 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport17 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport18 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport19 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport20 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport21 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport22 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport23 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport24 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport25 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport26 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport27 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport28 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport29 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport30 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport31 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport32 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport33 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport34 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport35 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport36 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport37 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport38 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport39 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport40 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        Port pport41 : TopicPublisherPortT = new TopicPublisherPortT extended with {

        }
        rule noServiceCallToSelf = invariant forall req :! ServiceClientPortT in self.PORTS | 
             ! exists resp :! ServiceProviderPortT in self.PORTS | 
                connected(req, resp);
        rule noActionCalLToSelf = invariant forall req :! ActionClientPortT in self.PORTS | 
             ! exists resp :! ActionServerPortT in self.PORTS | 
                connected(req, resp);

    }
    Connector /map_metadatatopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector map_msgs/OccupancyGridUpdatetopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /cmd_vel_mux/parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/feedbacktopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /navigation_velocity_smoother/parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/global_costmap/obstacle_layer_footprint/footprint_stampedtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector diagnostic_msgs/DiagnosticStatustopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/local_costmap/obstacle_layer_footprint/parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/NavfnROS/plantopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/statustopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector move_base_msgs/MoveBaseActionFeedbacktopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector geometry_msgs/PoseStampedtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/local_costmap/obstacle_layer/parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/local_costmap/obstacle_layer/clearing_endpointstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/global_costmap/inflation_layer/parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector rosgraph_msgs/Logtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /mobile_base_nodelet_manager/bondtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT1 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT1 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT3 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT2 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT6 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT3 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT8 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector dynamic_reconfigure/Configtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/current_goaltopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/local_costmap/costmaptopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /navigation_velocity_smoother/raw_cmd_veltopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/local_costmap/inflation_layer/parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector sensor_msgs/PointCloud2topic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/local_costmap/obstacle_layer_footprint/footprint_stampedtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /particlecloudtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/DWAPlannerROS/global_plantopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/global_costmap/obstacle_layer/clearing_endpointstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector std_msgs/Stringtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/DWAPlannerROS/cost_cloudtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/local_costmap/parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/goaltopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT1 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector bond/Statustopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /mobile_base/commands/velocitytopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT8 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /diagnostics_toplevel_statetopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT7 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/global_costmap/obstacle_layer_footprint/parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/global_costmap/obstacle_layer/parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector move_base_msgs/MoveBaseActionGoaltopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/global_costmap/costmap_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/local_costmap/inflation_layer/parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector geometry_msgs/Twisttopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /tftopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT1 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT1 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/DWAPlannerROS/trajectory_cloudtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /cmd_vel_mux/input/safety_controllertopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/global_costmap/static_layer/parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector actionlib_msgs/GoalStatusArraytopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector sensor_msgs/JointStatetopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector geometry_msgs/PoseWithCovarianceStampedtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/local_costmap/costmap_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/local_costmap/parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/global_costmap/inflation_layer/parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/DWAPlannerROS/parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /cmd_vel_mux/input/navitopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector nav_msgs/OccupancyGridtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /joint_statestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /rosouttopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT1 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT2 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT3 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT4 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT5 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT6 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT7 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT8 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/global_costmap/obstacle_layer/parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector tf2_msgs/TFMessagetopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/global_costmap/obstacle_layer_footprint/parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/global_costmap/costmaptopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/DWAPlannerROS/parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector geometry_msgs/PoseArraytopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /amcl_posetopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/global_costmap/parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /rosout_aggtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector geometry_msgs/PolygonStampedtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /cmd_vel_mux/parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/global_costmap/static_layer/parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /maptopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicSubscriberRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        Role ROSTopicSubscriberRoleT1 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /cmd_vel_mux/activetopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /navigation_velocity_smoother/parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/local_costmap/obstacle_layer_footprint/parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector move_base_msgs/MoveBaseActionResulttopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector dynamic_reconfigure/ConfigDescriptiontopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector diagnostic_msgs/DiagnosticArraytopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/local_costmap/obstacle_layer/parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /amcl/parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /amcl/parameter_updatestopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT0 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/DWAPlannerROS/local_plantopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector nav_msgs/Pathtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/resulttopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector nav_msgs/MapMetaDatatopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /move_base/global_costmap/parameter_descriptionstopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT9 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector /diagnostics_aggtopic : TopicConnectorT = new TopicConnectorT extended with {
        Role ROSTopicAdvertiserRoleT7 : ROSTopicAdvertiserRoleT = new ROSTopicAdvertiserRoleT extended with {
            rule attachedOnlyToAnnouncePortT = invariant forall a in self.ATTACHEDPORTS | 
                declaresType(a, AnnouncePortT);
            rule attachedToPublisherPortT = invariant forall p in self.ATTACHEDPORTS | 
                declaresType(p, PublishPortT);

        }
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Connector sensor_msgs/PointCloudtopic : TopicConnectorT = new TopicConnectorT extended with {
        rule topicsMatchAdvertiser = invariant forall r :! ROSTopicAdvertiserRoleT in self.ROLES | 
            forall p :! TopicAdvertisePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule topicsMatchSubscriber = invariant forall r :! ROSTopicSubscriberRoleT in self.ROLES | 
            forall p :! TopicSubscribePortT in r.ATTACHEDPORTS | 
                (p.topic == self.topic AND p.msg_type == self.msg_type);
        rule hasOneAnnoucerRole = invariant exists r in self.ROLES | 
            declaresType(r, AnnouncerRoleT);
        rule hasOneReceiverRole = invariant exists r in self.ROLES | 
            declaresType(r, ReceiverRoleT);
        rule atLeast1RoleOfTypePublisherRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, PublisherRoleT);
        rule atLeast1RoleOfTypeSubscriberRoleT = heuristic exists r in self.ROLES | 
            declaresType(r, SubscriberRoleT);

    }
    Attachment /amclnode.sport0 to /tftopic.ROSTopicSubscriberRoleT0;
    Attachment /amclnode.sport1 to /maptopic.ROSTopicSubscriberRoleT0;
    Attachment /amclnode.pport0 to /amcl_posetopic.ROSTopicAdvertiserRoleT0;
    Attachment /amclnode.pport1 to /tftopic.ROSTopicAdvertiserRoleT0;
    Attachment /amclnode.pport2 to /amcl/parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment /amclnode.pport3 to /particlecloudtopic.ROSTopicAdvertiserRoleT0;
    Attachment /amclnode.pport4 to /rosouttopic.ROSTopicAdvertiserRoleT0;
    Attachment /amclnode.pport5 to /amcl/parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment /cmd_vel_muxnode.sport0 to /mobile_base_nodelet_manager/bondtopic.ROSTopicSubscriberRoleT0;
    Attachment /cmd_vel_muxnode.pport0 to /rosouttopic.ROSTopicAdvertiserRoleT1;
    Attachment /cmd_vel_muxnode.pport1 to /mobile_base_nodelet_manager/bondtopic.ROSTopicAdvertiserRoleT1;
    Attachment /robot_state_publishernode.sport0 to /joint_statestopic.ROSTopicSubscriberRoleT0;
    Attachment /robot_state_publishernode.pport0 to /tftopic.ROSTopicAdvertiserRoleT1;
    Attachment /robot_state_publishernode.pport1 to /rosouttopic.ROSTopicAdvertiserRoleT2;
    Attachment /navigation_velocity_smoothernode.sport0 to /mobile_base_nodelet_manager/bondtopic.ROSTopicSubscriberRoleT1;
    Attachment /navigation_velocity_smoothernode.pport0 to /rosouttopic.ROSTopicAdvertiserRoleT3;
    Attachment /navigation_velocity_smoothernode.pport1 to /mobile_base_nodelet_manager/bondtopic.ROSTopicAdvertiserRoleT3;
    Attachment /rosoutnode.sport0 to /rosouttopic.ROSTopicSubscriberRoleT0;
    Attachment /rosoutnode.pport0 to /rosout_aggtopic.ROSTopicAdvertiserRoleT0;
    Attachment /map_servernode.pport0 to /map_metadatatopic.ROSTopicAdvertiserRoleT0;
    Attachment /map_servernode.pport1 to /maptopic.ROSTopicAdvertiserRoleT0;
    Attachment /map_servernode.pport2 to /rosouttopic.ROSTopicAdvertiserRoleT4;
    Attachment /joint_state_publishernode.pport0 to /joint_statestopic.ROSTopicAdvertiserRoleT0;
    Attachment /joint_state_publishernode.pport1 to /rosouttopic.ROSTopicAdvertiserRoleT5;
    Attachment /kobuki_safety_controllernode.sport0 to /mobile_base_nodelet_manager/bondtopic.ROSTopicSubscriberRoleT2;
    Attachment /kobuki_safety_controllernode.pport0 to /rosouttopic.ROSTopicAdvertiserRoleT6;
    Attachment /kobuki_safety_controllernode.pport1 to /mobile_base_nodelet_manager/bondtopic.ROSTopicAdvertiserRoleT6;
    Attachment /diagnostic_aggregatornode.pport0 to /rosouttopic.ROSTopicAdvertiserRoleT7;
    Attachment /diagnostic_aggregatornode.pport1 to /diagnostics_toplevel_statetopic.ROSTopicAdvertiserRoleT7;
    Attachment /diagnostic_aggregatornode.pport2 to /diagnostics_aggtopic.ROSTopicAdvertiserRoleT7;
    Attachment /mobile_base_nodelet_managernode.sport0 to /cmd_vel_mux/input/safety_controllertopic.ROSTopicSubscriberRoleT0;
    Attachment /mobile_base_nodelet_managernode.sport1 to /navigation_velocity_smoother/raw_cmd_veltopic.ROSTopicSubscriberRoleT0;
    Attachment /mobile_base_nodelet_managernode.sport2 to /cmd_vel_mux/input/navitopic.ROSTopicSubscriberRoleT0;
    Attachment /mobile_base_nodelet_managernode.sport3 to /mobile_base/commands/velocitytopic.ROSTopicSubscriberRoleT0;
    Attachment /mobile_base_nodelet_managernode.sport4 to /mobile_base_nodelet_manager/bondtopic.ROSTopicSubscriberRoleT3;
    Attachment /mobile_base_nodelet_managernode.pport0 to /cmd_vel_mux/parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment /mobile_base_nodelet_managernode.pport1 to /navigation_velocity_smoother/parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment /mobile_base_nodelet_managernode.pport2 to /cmd_vel_mux/input/safety_controllertopic.ROSTopicAdvertiserRoleT0;
    Attachment /mobile_base_nodelet_managernode.pport3 to /cmd_vel_mux/parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment /mobile_base_nodelet_managernode.pport4 to /cmd_vel_mux/activetopic.ROSTopicAdvertiserRoleT0;
    Attachment /mobile_base_nodelet_managernode.pport5 to /cmd_vel_mux/input/navitopic.ROSTopicAdvertiserRoleT0;
    Attachment /mobile_base_nodelet_managernode.pport6 to /navigation_velocity_smoother/parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment /mobile_base_nodelet_managernode.pport7 to /rosouttopic.ROSTopicAdvertiserRoleT8;
    Attachment /mobile_base_nodelet_managernode.pport8 to /mobile_base/commands/velocitytopic.ROSTopicAdvertiserRoleT8;
    Attachment /mobile_base_nodelet_managernode.pport9 to /mobile_base_nodelet_manager/bondtopic.ROSTopicAdvertiserRoleT8;
    Attachment /move_basenode.sport0 to /tftopic.ROSTopicSubscriberRoleT1;
    Attachment /move_basenode.sport1 to /maptopic.ROSTopicSubscriberRoleT1;
    Attachment /move_basenode.sport2 to /move_base/goaltopic.ROSTopicSubscriberRoleT1;
    Attachment /move_basenode.pport0 to /move_base/global_costmap/costmap_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport1 to /move_base/current_goaltopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport2 to /move_base/local_costmap/inflation_layer/parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport3 to /move_base/feedbacktopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport4 to /move_base/global_costmap/parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport5 to /move_base/local_costmap/costmaptopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport6 to /move_base/global_costmap/static_layer/parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport7 to /move_base/global_costmap/obstacle_layer_footprint/footprint_stampedtopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport8 to /navigation_velocity_smoother/raw_cmd_veltopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport9 to /move_base/local_costmap/inflation_layer/parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport10 to /move_base/local_costmap/obstacle_layer_footprint/parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport11 to /move_base/global_costmap/static_layer/parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport12 to /move_base/local_costmap/costmap_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport13 to /move_base/NavfnROS/plantopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport14 to /move_base/local_costmap/parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport15 to /move_base/DWAPlannerROS/parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport16 to /move_base/DWAPlannerROS/trajectory_cloudtopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport17 to /move_base/parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport18 to /move_base/statustopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport19 to /move_base/global_costmap/inflation_layer/parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport20 to /move_base/global_costmap/costmaptopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport21 to /move_base/global_costmap/obstacle_layer/clearing_endpointstopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport22 to /move_base/local_costmap/obstacle_layer_footprint/parameter_descriptionstopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport23 to /move_base/local_costmap/parameter_updatestopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport24 to /move_base/DWAPlannerROS/cost_cloudtopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport25 to /move_base/local_costmap/obstacle_layer_footprint/footprint_stampedtopic.ROSTopicAdvertiserRoleT0;
    Attachment /move_basenode.pport26 to /rosouttopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport27 to /move_base/global_costmap/obstacle_layer_footprint/parameter_updatestopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport28 to /move_base/local_costmap/obstacle_layer/parameter_descriptionstopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport29 to /move_base/goaltopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport30 to /move_base/local_costmap/obstacle_layer/parameter_updatestopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport31 to /move_base/local_costmap/obstacle_layer/clearing_endpointstopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport32 to /move_base/DWAPlannerROS/global_plantopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport33 to /move_base/DWAPlannerROS/local_plantopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport34 to /move_base/global_costmap/inflation_layer/parameter_descriptionstopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport35 to /move_base/global_costmap/obstacle_layer/parameter_descriptionstopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport36 to /move_base/parameter_descriptionstopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport37 to /move_base/global_costmap/obstacle_layer_footprint/parameter_descriptionstopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport38 to /move_base/resulttopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport39 to /move_base/global_costmap/obstacle_layer/parameter_updatestopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport40 to /move_base/global_costmap/parameter_descriptionstopic.ROSTopicAdvertiserRoleT9;
    Attachment /move_basenode.pport41 to /move_base/DWAPlannerROS/parameter_updatestopic.ROSTopicAdvertiserRoleT9;
    rule topicsMatch = heuristic forall s :! TopicSubscribePortT in /self/COMPONENTS/PORTS:!TopicSubscribePortT | 
        exists p :! TopicAdvertisePortT in /self/COMPONENTS/PORTS:!TopicAdvertisePortT | 
            (s.topic == p.topic AND s.msg_type == p.msg_type);
    rule onlyOneBusForTopicAndMsg = invariant forall t1 :! TopicConnectorT in self.CONNECTORS | 
        forall t2 :! TopicConnectorT in self.CONNECTORS | 
            ((t1.msg_type == t2.msg_type AND t1.topic == t2.topic) <-> t1 == t2);
    rule onlyOneBusForTopic = heuristic forall t1 :! TopicConnectorT in self.CONNECTORS | 
        forall t2 :! TopicConnectorT in self.CONNECTORS | 
            (t1.topic == t2.topic) <-> t1 == t2;
    rule noDuplicateNodes = invariant forall n2 :! ROSNodeCompT in self.COMPONENTS | 
        forall n1 :! ROSNodeCompT in self.COMPONENTS | 
            (n1.name == n2.name) <-> n1 == n2;
}

